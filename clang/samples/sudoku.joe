:args.

table <- !array
           ( !array  0,  0,  0, /**/  7,  0,  0, /**/  0,  0,  9 ),
           ( !array  0,  0,  2, /**/  0,  0,  0, /**/  6,  0,  0 ),
           ( !array  8,  0,  0, /**/  0,  1,  3, /**/  0,  0,  5 ),
           /*****************************************************/
           ( !array  0,  6,  0, /**/  0,  7,  4, /**/  5,  0,  0 ),
           ( !array  4,  0,  0, /**/  9,  0,  0, /**/  0,  0,  0 ),
           ( !array  0,  0,  0, /**/  8,  0,  0, /**/  0,  0,  7 ),
           /*****************************************************/
           ( !array  0,  0,  0, /**/  0,  0,  9, /**/  0,  0,  0 ),
           ( !array  3,  0,  0, /**/  0,  4,  5, /**/  0,  0,  1 ),
           ( !array  0,  8,  0, /**/  0,  0,  0, /**/  0,  3,  0 ).

show <- {:aTab.
   !for 0, (aTab length; - 1),{:i.
      i % 3 = 0 ifTrue {
         !println ("+---+---+---+").
      }.
      !for 0,(aTab get i length; - 1),{:j.
         j % 3 = 0 ifTrue {
            !print ("|").
         }.
         !print (aTab get i get j).
      }.
      !println ("|");
   }.
   !println ("+---+---+---+");
}.

conflicts <- {:y,x,v,aTab.
   Return := <0>.
   !for 0,(aTab length; - 1),{:i.
      aTab get i get x = v ifTrue { Return := <1> }.
   }.
   !for 0,(aTab get y length; - 1),{:j.
      aTab get y get j = v ifTrue { Return := <1> }.
   }.
   sy <- 3 * (y / 3).
   sx <- 3 * (x / 3).
   !for (sy + 2),sy,-1,{:i.
      !for (sx + 2),sx,-1,{:j.
         aTab get i get j = v ifTrue { Return := <1> }.
      }.
   }.

   Return.
}.

checkInit <- {:aTab.
   Return := <1>.
   !for 0,(aTab length; - 1),{:y.
      !for 0,(aTab get y length; - 1),{:x.
         v <- aTab get y get x.
         v <> 0 ifTrue {
            aTab get y set x,0.
            noOk <- conflicts exec y,x,v,aTab.
            aTab get y set x,v.
            noOk ifTrue { Return := <0>. !breakLoop. }.
         }.
      }.
      Return ifFalse { !breakLoop }.
   }.
   Return.
}.

minConflicts <- .

nextPos <- {:y,x,aTab.
   Return := .

   x := x + 1.
   x = (aTab get y length) ifTrue {
      y := y + 1.
      y < (aTab length) ifTrue {
         Return := minConflicts exec y,0,aTab.
      },{
        Return := <1>.
      }.
   },{
      Return := minConflicts exec y, x, aTab.
   }.
   Return.
}.

minConflicts <- {:y, x, aTab.
  
   Return := <0>.
   aTab get y get x <> 0 ifTrue {
      Return := nextPos exec y,x,aTab.
   },{
      !for 1,9,{:t.
         conflicts exec y,x,t,aTab ifFalse {
            aTab get y set x,t.
            nextPos exec y,x,aTab ifTrue { Return := <1>. !breakLoop. }.
         }.
      }.
      Return ifFalse { aTab get y set x,0.}.
   }.
   Return.
}.

checkInit exec table ifTrue {
   minConflicts exec 0,0,table ifTrue {
      show exec table.
   },{
      !println "Nessuna soluzione".
   }.
},{
   !println "Schema non valido".
}.
